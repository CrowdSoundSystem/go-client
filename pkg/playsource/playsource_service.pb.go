// Code generated by protoc-gen-go.
// source: pkg/playsource/playsource_service.proto
// DO NOT EDIT!

/*
Package playsource is a generated protocol buffer package.

It is generated from these files:
	pkg/playsource/playsource_service.proto

It has these top-level messages:
	QueueSongRequest
	QueueSongResponse
	GetPlayingRequest
	GetPlayingResponse
	GetPlayHistoryRequest
	GetPlayHistoryResponse
*/
package playsource

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type QueueSongRequest struct {
	SongId   int32  `protobuf:"varint,1,opt,name=songId" json:"songId,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *QueueSongRequest) Reset()                    { *m = QueueSongRequest{} }
func (m *QueueSongRequest) String() string            { return proto.CompactTextString(m) }
func (*QueueSongRequest) ProtoMessage()               {}
func (*QueueSongRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type QueueSongResponse struct {
	Queued bool `protobuf:"varint,1,opt,name=queued" json:"queued,omitempty"`
}

func (m *QueueSongResponse) Reset()                    { *m = QueueSongResponse{} }
func (m *QueueSongResponse) String() string            { return proto.CompactTextString(m) }
func (*QueueSongResponse) ProtoMessage()               {}
func (*QueueSongResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetPlayingRequest struct {
}

func (m *GetPlayingRequest) Reset()                    { *m = GetPlayingRequest{} }
func (m *GetPlayingRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlayingRequest) ProtoMessage()               {}
func (*GetPlayingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetPlayingResponse struct {
	SongId   int32  `protobuf:"varint,1,opt,name=songId" json:"songId,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *GetPlayingResponse) Reset()                    { *m = GetPlayingResponse{} }
func (m *GetPlayingResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPlayingResponse) ProtoMessage()               {}
func (*GetPlayingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetPlayHistoryRequest struct {
}

func (m *GetPlayHistoryRequest) Reset()                    { *m = GetPlayHistoryRequest{} }
func (m *GetPlayHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetPlayHistoryRequest) ProtoMessage()               {}
func (*GetPlayHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type GetPlayHistoryResponse struct {
	SongId   int32  `protobuf:"varint,1,opt,name=songId" json:"songId,omitempty"`
	Filename string `protobuf:"bytes,2,opt,name=filename" json:"filename,omitempty"`
}

func (m *GetPlayHistoryResponse) Reset()                    { *m = GetPlayHistoryResponse{} }
func (m *GetPlayHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetPlayHistoryResponse) ProtoMessage()               {}
func (*GetPlayHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func init() {
	proto.RegisterType((*QueueSongRequest)(nil), "PlaySource.QueueSongRequest")
	proto.RegisterType((*QueueSongResponse)(nil), "PlaySource.QueueSongResponse")
	proto.RegisterType((*GetPlayingRequest)(nil), "PlaySource.GetPlayingRequest")
	proto.RegisterType((*GetPlayingResponse)(nil), "PlaySource.GetPlayingResponse")
	proto.RegisterType((*GetPlayHistoryRequest)(nil), "PlaySource.GetPlayHistoryRequest")
	proto.RegisterType((*GetPlayHistoryResponse)(nil), "PlaySource.GetPlayHistoryResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for PlaySource service

type PlaySourceClient interface {
	// QueueSong attempts to queue a song for the playsource service to play.
	// QueueSongResponse indicates whether or not the song was queued. If the
	// song to be queued cannot be located, QueueSong returns an RPC error.
	QueueSong(ctx context.Context, in *QueueSongRequest, opts ...grpc.CallOption) (*QueueSongResponse, error)
	GetPlaying(ctx context.Context, in *GetPlayingRequest, opts ...grpc.CallOption) (*GetPlayingResponse, error)
	GetPlayHistory(ctx context.Context, in *GetPlayHistoryRequest, opts ...grpc.CallOption) (PlaySource_GetPlayHistoryClient, error)
}

type playSourceClient struct {
	cc *grpc.ClientConn
}

func NewPlaySourceClient(cc *grpc.ClientConn) PlaySourceClient {
	return &playSourceClient{cc}
}

func (c *playSourceClient) QueueSong(ctx context.Context, in *QueueSongRequest, opts ...grpc.CallOption) (*QueueSongResponse, error) {
	out := new(QueueSongResponse)
	err := grpc.Invoke(ctx, "/PlaySource.PlaySource/QueueSong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playSourceClient) GetPlaying(ctx context.Context, in *GetPlayingRequest, opts ...grpc.CallOption) (*GetPlayingResponse, error) {
	out := new(GetPlayingResponse)
	err := grpc.Invoke(ctx, "/PlaySource.PlaySource/GetPlaying", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playSourceClient) GetPlayHistory(ctx context.Context, in *GetPlayHistoryRequest, opts ...grpc.CallOption) (PlaySource_GetPlayHistoryClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PlaySource_serviceDesc.Streams[0], c.cc, "/PlaySource.PlaySource/GetPlayHistory", opts...)
	if err != nil {
		return nil, err
	}
	x := &playSourceGetPlayHistoryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PlaySource_GetPlayHistoryClient interface {
	Recv() (*GetPlayHistoryResponse, error)
	grpc.ClientStream
}

type playSourceGetPlayHistoryClient struct {
	grpc.ClientStream
}

func (x *playSourceGetPlayHistoryClient) Recv() (*GetPlayHistoryResponse, error) {
	m := new(GetPlayHistoryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PlaySource service

type PlaySourceServer interface {
	// QueueSong attempts to queue a song for the playsource service to play.
	// QueueSongResponse indicates whether or not the song was queued. If the
	// song to be queued cannot be located, QueueSong returns an RPC error.
	QueueSong(context.Context, *QueueSongRequest) (*QueueSongResponse, error)
	GetPlaying(context.Context, *GetPlayingRequest) (*GetPlayingResponse, error)
	GetPlayHistory(*GetPlayHistoryRequest, PlaySource_GetPlayHistoryServer) error
}

func RegisterPlaySourceServer(s *grpc.Server, srv PlaySourceServer) {
	s.RegisterService(&_PlaySource_serviceDesc, srv)
}

func _PlaySource_QueueSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(QueueSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlaySourceServer).QueueSong(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlaySource_GetPlaying_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(GetPlayingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(PlaySourceServer).GetPlaying(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _PlaySource_GetPlayHistory_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPlayHistoryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlaySourceServer).GetPlayHistory(m, &playSourceGetPlayHistoryServer{stream})
}

type PlaySource_GetPlayHistoryServer interface {
	Send(*GetPlayHistoryResponse) error
	grpc.ServerStream
}

type playSourceGetPlayHistoryServer struct {
	grpc.ServerStream
}

func (x *playSourceGetPlayHistoryServer) Send(m *GetPlayHistoryResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _PlaySource_serviceDesc = grpc.ServiceDesc{
	ServiceName: "PlaySource.PlaySource",
	HandlerType: (*PlaySourceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "QueueSong",
			Handler:    _PlaySource_QueueSong_Handler,
		},
		{
			MethodName: "GetPlaying",
			Handler:    _PlaySource_GetPlaying_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPlayHistory",
			Handler:       _PlaySource_GetPlayHistory_Handler,
			ServerStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x52, 0x2f, 0xc8, 0x4e, 0xd7,
	0x2f, 0xc8, 0x49, 0xac, 0x2c, 0xce, 0x2f, 0x2d, 0x4a, 0x4e, 0x45, 0x62, 0xc6, 0x17, 0xa7, 0x16,
	0x95, 0x65, 0x26, 0xa7, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x71, 0x05, 0x00, 0x65, 0x82,
	0xc1, 0x32, 0x4a, 0x26, 0x5c, 0x02, 0x81, 0xa5, 0xa9, 0xa5, 0xa9, 0xc1, 0xf9, 0x79, 0xe9, 0x41,
	0xa9, 0x85, 0xa5, 0xa9, 0xc5, 0x25, 0x42, 0x7c, 0x5c, 0x6c, 0xc5, 0x40, 0xae, 0x67, 0x8a, 0x04,
	0xa3, 0x02, 0xa3, 0x06, 0xab, 0x90, 0x00, 0x17, 0x47, 0x5a, 0x66, 0x4e, 0x6a, 0x5e, 0x62, 0x6e,
	0xaa, 0x04, 0x13, 0x50, 0x84, 0x53, 0x49, 0x99, 0x4b, 0x10, 0x49, 0x57, 0x71, 0x41, 0x7e, 0x5e,
	0x71, 0x2a, 0x48, 0x5b, 0x21, 0x48, 0x10, 0xa2, 0x8d, 0x43, 0x49, 0x98, 0x4b, 0xd0, 0x3d, 0xb5,
	0x04, 0x64, 0x57, 0x26, 0xdc, 0x6c, 0x25, 0x33, 0x2e, 0x21, 0x64, 0x41, 0x84, 0x56, 0x02, 0x36,
	0x8a, 0x73, 0x89, 0x42, 0xf5, 0x79, 0x64, 0x16, 0x97, 0xe4, 0x17, 0x55, 0xc2, 0x0c, 0xb4, 0xe2,
	0x12, 0x43, 0x97, 0x20, 0xd6, 0x50, 0xa3, 0x16, 0x26, 0x2e, 0xa4, 0xb0, 0x10, 0xf2, 0xe2, 0xe2,
	0x84, 0xfb, 0x4a, 0x48, 0x46, 0x0f, 0x21, 0xa3, 0x87, 0x1e, 0x44, 0x52, 0xb2, 0x38, 0x64, 0x21,
	0x56, 0x2b, 0x31, 0x08, 0xf9, 0x72, 0x71, 0x21, 0xfc, 0x29, 0x84, 0xa2, 0x1c, 0x23, 0x50, 0xa4,
	0xe4, 0x70, 0x49, 0xc3, 0x8d, 0x8b, 0xe6, 0xe2, 0x43, 0xf5, 0xa5, 0x90, 0x22, 0x16, 0x3d, 0xa8,
	0x41, 0x23, 0xa5, 0x84, 0x4f, 0x09, 0xcc, 0x68, 0x03, 0x46, 0x27, 0x9e, 0x28, 0x2e, 0x44, 0x5a,
	0x49, 0x62, 0x03, 0x27, 0x12, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7a, 0x73, 0xd5, 0xae,
	0x4f, 0x02, 0x00, 0x00,
}
