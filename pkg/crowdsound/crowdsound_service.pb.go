// Code generated by protoc-gen-go.
// source: pkg/crowdsound/crowdsound_service.proto
// DO NOT EDIT!

/*
Package crowdsound is a generated protocol buffer package.

It is generated from these files:
	pkg/crowdsound/crowdsound_service.proto

It has these top-level messages:
	PingRequest
	PingResponse
	GetQueueRequest
	GetQueueResponse
	ListTrendingArtistsRequest
	ListTrendingArtistsResponse
	PostSongRequest
	PostSongResponse
	VoteSongRequest
	VoteSongResponse
*/
package crowdsound

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
const _ = proto.ProtoPackageIsVersion1

type PingRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PingResponse struct {
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type GetQueueRequest struct {
}

func (m *GetQueueRequest) Reset()                    { *m = GetQueueRequest{} }
func (m *GetQueueRequest) String() string            { return proto.CompactTextString(m) }
func (*GetQueueRequest) ProtoMessage()               {}
func (*GetQueueRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type GetQueueResponse struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Artist    string `protobuf:"bytes,2,opt,name=artist" json:"artist,omitempty"`
	Genre     string `protobuf:"bytes,3,opt,name=genre" json:"genre,omitempty"`
	IsPlaying bool   `protobuf:"varint,4,opt,name=isPlaying" json:"isPlaying,omitempty"`
}

func (m *GetQueueResponse) Reset()                    { *m = GetQueueResponse{} }
func (m *GetQueueResponse) String() string            { return proto.CompactTextString(m) }
func (*GetQueueResponse) ProtoMessage()               {}
func (*GetQueueResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type ListTrendingArtistsRequest struct {
}

func (m *ListTrendingArtistsRequest) Reset()                    { *m = ListTrendingArtistsRequest{} }
func (m *ListTrendingArtistsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTrendingArtistsRequest) ProtoMessage()               {}
func (*ListTrendingArtistsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type ListTrendingArtistsResponse struct {
	Name  string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Score int32  `protobuf:"varint,2,opt,name=score" json:"score,omitempty"`
}

func (m *ListTrendingArtistsResponse) Reset()                    { *m = ListTrendingArtistsResponse{} }
func (m *ListTrendingArtistsResponse) String() string            { return proto.CompactTextString(m) }
func (*ListTrendingArtistsResponse) ProtoMessage()               {}
func (*ListTrendingArtistsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type PostSongRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Artist string `protobuf:"bytes,3,opt,name=artist" json:"artist,omitempty"`
	Genre  string `protobuf:"bytes,4,opt,name=genre" json:"genre,omitempty"`
}

func (m *PostSongRequest) Reset()                    { *m = PostSongRequest{} }
func (m *PostSongRequest) String() string            { return proto.CompactTextString(m) }
func (*PostSongRequest) ProtoMessage()               {}
func (*PostSongRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type PostSongResponse struct {
}

func (m *PostSongResponse) Reset()                    { *m = PostSongResponse{} }
func (m *PostSongResponse) String() string            { return proto.CompactTextString(m) }
func (*PostSongResponse) ProtoMessage()               {}
func (*PostSongResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type VoteSongRequest struct {
	UserId string `protobuf:"bytes,1,opt,name=user_id" json:"user_id,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Artist string `protobuf:"bytes,3,opt,name=artist" json:"artist,omitempty"`
	Like   bool   `protobuf:"varint,4,opt,name=like" json:"like,omitempty"`
}

func (m *VoteSongRequest) Reset()                    { *m = VoteSongRequest{} }
func (m *VoteSongRequest) String() string            { return proto.CompactTextString(m) }
func (*VoteSongRequest) ProtoMessage()               {}
func (*VoteSongRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type VoteSongResponse struct {
}

func (m *VoteSongResponse) Reset()                    { *m = VoteSongResponse{} }
func (m *VoteSongResponse) String() string            { return proto.CompactTextString(m) }
func (*VoteSongResponse) ProtoMessage()               {}
func (*VoteSongResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func init() {
	proto.RegisterType((*PingRequest)(nil), "CrowdSound.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "CrowdSound.PingResponse")
	proto.RegisterType((*GetQueueRequest)(nil), "CrowdSound.GetQueueRequest")
	proto.RegisterType((*GetQueueResponse)(nil), "CrowdSound.GetQueueResponse")
	proto.RegisterType((*ListTrendingArtistsRequest)(nil), "CrowdSound.ListTrendingArtistsRequest")
	proto.RegisterType((*ListTrendingArtistsResponse)(nil), "CrowdSound.ListTrendingArtistsResponse")
	proto.RegisterType((*PostSongRequest)(nil), "CrowdSound.PostSongRequest")
	proto.RegisterType((*PostSongResponse)(nil), "CrowdSound.PostSongResponse")
	proto.RegisterType((*VoteSongRequest)(nil), "CrowdSound.VoteSongRequest")
	proto.RegisterType((*VoteSongResponse)(nil), "CrowdSound.VoteSongResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Client API for CrowdSound service

type CrowdSoundClient interface {
	// Ping sends a ping to the server to indicate the client is
	// alive and connected.
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// GetQueue streams the queue of songs (including what's currently playing).
	GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (CrowdSound_GetQueueClient, error)
	// ListTrendingArtists returns an ordered list of artists, based on trending
	// value.
	//
	// As with ListSongs, it is up to the client to control pagination and stream
	// termination (with the exception of end-of-stream).
	ListTrendingArtists(ctx context.Context, in *ListTrendingArtistsRequest, opts ...grpc.CallOption) (CrowdSound_ListTrendingArtistsClient, error)
	// PostSong informs the CrowdSound service of a 'Song' that the client
	// has. The 'Song' may or may not have all of the fields filled or present.
	PostSong(ctx context.Context, opts ...grpc.CallOption) (CrowdSound_PostSongClient, error)
	// VoteSong informs the CrowdSound service of a vote for a Song.
	VoteSong(ctx context.Context, in *VoteSongRequest, opts ...grpc.CallOption) (*VoteSongResponse, error)
}

type crowdSoundClient struct {
	cc *grpc.ClientConn
}

func NewCrowdSoundClient(cc *grpc.ClientConn) CrowdSoundClient {
	return &crowdSoundClient{cc}
}

func (c *crowdSoundClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/CrowdSound.CrowdSound/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crowdSoundClient) GetQueue(ctx context.Context, in *GetQueueRequest, opts ...grpc.CallOption) (CrowdSound_GetQueueClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CrowdSound_serviceDesc.Streams[0], c.cc, "/CrowdSound.CrowdSound/GetQueue", opts...)
	if err != nil {
		return nil, err
	}
	x := &crowdSoundGetQueueClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrowdSound_GetQueueClient interface {
	Recv() (*GetQueueResponse, error)
	grpc.ClientStream
}

type crowdSoundGetQueueClient struct {
	grpc.ClientStream
}

func (x *crowdSoundGetQueueClient) Recv() (*GetQueueResponse, error) {
	m := new(GetQueueResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crowdSoundClient) ListTrendingArtists(ctx context.Context, in *ListTrendingArtistsRequest, opts ...grpc.CallOption) (CrowdSound_ListTrendingArtistsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CrowdSound_serviceDesc.Streams[1], c.cc, "/CrowdSound.CrowdSound/ListTrendingArtists", opts...)
	if err != nil {
		return nil, err
	}
	x := &crowdSoundListTrendingArtistsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CrowdSound_ListTrendingArtistsClient interface {
	Recv() (*ListTrendingArtistsResponse, error)
	grpc.ClientStream
}

type crowdSoundListTrendingArtistsClient struct {
	grpc.ClientStream
}

func (x *crowdSoundListTrendingArtistsClient) Recv() (*ListTrendingArtistsResponse, error) {
	m := new(ListTrendingArtistsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crowdSoundClient) PostSong(ctx context.Context, opts ...grpc.CallOption) (CrowdSound_PostSongClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_CrowdSound_serviceDesc.Streams[2], c.cc, "/CrowdSound.CrowdSound/PostSong", opts...)
	if err != nil {
		return nil, err
	}
	x := &crowdSoundPostSongClient{stream}
	return x, nil
}

type CrowdSound_PostSongClient interface {
	Send(*PostSongRequest) error
	CloseAndRecv() (*PostSongResponse, error)
	grpc.ClientStream
}

type crowdSoundPostSongClient struct {
	grpc.ClientStream
}

func (x *crowdSoundPostSongClient) Send(m *PostSongRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *crowdSoundPostSongClient) CloseAndRecv() (*PostSongResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(PostSongResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *crowdSoundClient) VoteSong(ctx context.Context, in *VoteSongRequest, opts ...grpc.CallOption) (*VoteSongResponse, error) {
	out := new(VoteSongResponse)
	err := grpc.Invoke(ctx, "/CrowdSound.CrowdSound/VoteSong", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CrowdSound service

type CrowdSoundServer interface {
	// Ping sends a ping to the server to indicate the client is
	// alive and connected.
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// GetQueue streams the queue of songs (including what's currently playing).
	GetQueue(*GetQueueRequest, CrowdSound_GetQueueServer) error
	// ListTrendingArtists returns an ordered list of artists, based on trending
	// value.
	//
	// As with ListSongs, it is up to the client to control pagination and stream
	// termination (with the exception of end-of-stream).
	ListTrendingArtists(*ListTrendingArtistsRequest, CrowdSound_ListTrendingArtistsServer) error
	// PostSong informs the CrowdSound service of a 'Song' that the client
	// has. The 'Song' may or may not have all of the fields filled or present.
	PostSong(CrowdSound_PostSongServer) error
	// VoteSong informs the CrowdSound service of a vote for a Song.
	VoteSong(context.Context, *VoteSongRequest) (*VoteSongResponse, error)
}

func RegisterCrowdSoundServer(s *grpc.Server, srv CrowdSoundServer) {
	s.RegisterService(&_CrowdSound_serviceDesc, srv)
}

func _CrowdSound_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrowdSoundServer).Ping(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func _CrowdSound_GetQueue_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetQueueRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrowdSoundServer).GetQueue(m, &crowdSoundGetQueueServer{stream})
}

type CrowdSound_GetQueueServer interface {
	Send(*GetQueueResponse) error
	grpc.ServerStream
}

type crowdSoundGetQueueServer struct {
	grpc.ServerStream
}

func (x *crowdSoundGetQueueServer) Send(m *GetQueueResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CrowdSound_ListTrendingArtists_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListTrendingArtistsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CrowdSoundServer).ListTrendingArtists(m, &crowdSoundListTrendingArtistsServer{stream})
}

type CrowdSound_ListTrendingArtistsServer interface {
	Send(*ListTrendingArtistsResponse) error
	grpc.ServerStream
}

type crowdSoundListTrendingArtistsServer struct {
	grpc.ServerStream
}

func (x *crowdSoundListTrendingArtistsServer) Send(m *ListTrendingArtistsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _CrowdSound_PostSong_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CrowdSoundServer).PostSong(&crowdSoundPostSongServer{stream})
}

type CrowdSound_PostSongServer interface {
	SendAndClose(*PostSongResponse) error
	Recv() (*PostSongRequest, error)
	grpc.ServerStream
}

type crowdSoundPostSongServer struct {
	grpc.ServerStream
}

func (x *crowdSoundPostSongServer) SendAndClose(m *PostSongResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *crowdSoundPostSongServer) Recv() (*PostSongRequest, error) {
	m := new(PostSongRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CrowdSound_VoteSong_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(VoteSongRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(CrowdSoundServer).VoteSong(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _CrowdSound_serviceDesc = grpc.ServiceDesc{
	ServiceName: "CrowdSound.CrowdSound",
	HandlerType: (*CrowdSoundServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _CrowdSound_Ping_Handler,
		},
		{
			MethodName: "VoteSong",
			Handler:    _CrowdSound_VoteSong_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetQueue",
			Handler:       _CrowdSound_GetQueue_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ListTrendingArtists",
			Handler:       _CrowdSound_ListTrendingArtists_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostSong",
			Handler:       _CrowdSound_PostSong_Handler,
			ClientStreams: true,
		},
	},
}

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x93, 0xbb, 0x4e, 0xe3, 0x40,
	0x14, 0x86, 0x63, 0xc7, 0xb9, 0x9d, 0xcd, 0xc6, 0xc9, 0x6c, 0xb1, 0x96, 0x13, 0xad, 0x56, 0x2e,
	0x36, 0xa9, 0xbc, 0xab, 0xa5, 0x83, 0x0a, 0x52, 0x44, 0x48, 0x08, 0x42, 0x82, 0x28, 0x68, 0xa2,
	0x60, 0x1f, 0x59, 0x26, 0xc1, 0x63, 0x3c, 0x36, 0x97, 0xf7, 0xe0, 0x09, 0x78, 0x52, 0xc6, 0x37,
	0x7c, 0x89, 0x23, 0x0a, 0x3a, 0xcf, 0xf9, 0xcf, 0xfc, 0xff, 0xf1, 0xf9, 0x34, 0x30, 0x76, 0x37,
	0xd6, 0x5f, 0xc3, 0xa3, 0x4f, 0x26, 0xa3, 0x81, 0x63, 0xe6, 0x3e, 0x57, 0x0c, 0xbd, 0x47, 0xdb,
	0x40, 0xdd, 0xf5, 0xa8, 0x4f, 0x09, 0x4c, 0x43, 0x65, 0x19, 0x2a, 0xda, 0x2f, 0xf8, 0x36, 0xb7,
	0x1d, 0x6b, 0x81, 0x0f, 0x01, 0x32, 0x9f, 0xc8, 0xd0, 0x0a, 0x78, 0xf3, 0xca, 0x36, 0x15, 0xe1,
	0xb7, 0x30, 0xe9, 0x68, 0x3d, 0xe8, 0xc6, 0x3a, 0x73, 0xa9, 0xc3, 0x50, 0x1b, 0x80, 0x3c, 0x43,
	0xff, 0x32, 0xc0, 0x00, 0x93, 0x3b, 0xda, 0x02, 0xfa, 0x59, 0x29, 0x6e, 0x23, 0x5d, 0x90, 0x9c,
	0xf5, 0x3d, 0xc6, 0x26, 0xa4, 0x07, 0xcd, 0xb5, 0xe7, 0xdb, 0xcc, 0x57, 0xc4, 0xe8, 0xfc, 0x1d,
	0x1a, 0x16, 0x3a, 0x1e, 0x2a, 0xf5, 0xe8, 0x38, 0x80, 0x8e, 0xcd, 0xe6, 0xdb, 0xf5, 0x0b, 0x0f,
	0x52, 0x24, 0x5e, 0x6a, 0x6b, 0x23, 0x50, 0xcf, 0x78, 0xff, 0x95, 0x87, 0x8e, 0xc9, 0xab, 0xc7,
	0xd1, 0x6d, 0x96, 0x26, 0x1e, 0xc2, 0xb0, 0x52, 0xad, 0x0c, 0xe7, 0x61, 0xcc, 0xa0, 0x3c, 0x2c,
	0xcc, 0x6e, 0x68, 0x17, 0x20, 0xcf, 0x29, 0xf3, 0x97, 0x74, 0xff, 0x4f, 0x7f, 0x18, 0x88, 0xa5,
	0xe9, 0xeb, 0xc5, 0xe9, 0xa5, 0x68, 0x43, 0x04, 0xfa, 0x99, 0x61, 0xb2, 0xa5, 0x73, 0x90, 0xaf,
	0xa9, 0x8f, 0x5f, 0x08, 0xe1, 0xea, 0xd6, 0xde, 0x60, 0xb2, 0x0e, 0x9e, 0x91, 0xf9, 0xc5, 0x19,
	0xff, 0x5f, 0xeb, 0x90, 0x03, 0x49, 0x8e, 0x40, 0x0a, 0x41, 0x91, 0x9f, 0x7a, 0x56, 0xd4, 0x73,
	0x68, 0x55, 0x65, 0x57, 0x48, 0xa6, 0xad, 0x91, 0x53, 0x68, 0xa7, 0x08, 0xc9, 0x30, 0xdf, 0x57,
	0x62, 0xad, 0x8e, 0xaa, 0xc5, 0xd4, 0xe8, 0x9f, 0x40, 0xee, 0xe0, 0x47, 0x05, 0x1b, 0xf2, 0x27,
	0x7f, 0x71, 0x3f, 0x5a, 0x75, 0xfc, 0x69, 0x5f, 0x2e, 0x8b, 0x8f, 0x9d, 0xae, 0xbe, 0x38, 0x76,
	0x89, 0x70, 0x71, 0xec, 0x1d, 0x5a, 0xb5, 0x89, 0x40, 0x66, 0xd0, 0x4e, 0x37, 0x5c, 0xb4, 0x2a,
	0x71, 0x2c, 0x5a, 0x95, 0xa1, 0x68, 0xb5, 0x13, 0x15, 0x5a, 0xf8, 0xac, 0x5b, 0x9e, 0x6b, 0xdc,
	0x40, 0xf6, 0x02, 0xdf, 0x44, 0x71, 0xba, 0xbc, 0x6d, 0x46, 0xef, 0xef, 0xe0, 0x3d, 0x00, 0x00,
	0xff, 0xff, 0xb3, 0xef, 0x0c, 0x32, 0xaa, 0x03, 0x00, 0x00,
}
